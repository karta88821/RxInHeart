//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `婚禮禮盒.jpg`.
    static let 婚禮禮盒Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "婚禮禮盒", pathExtension: "jpg")
    /// Resource file `婚禮禮盒2.jpg`.
    static let 婚禮禮盒2Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "婚禮禮盒2", pathExtension: "jpg")
    
    /// `bundle.url(forResource: "婚禮禮盒", withExtension: "jpg")`
    static func 婚禮禮盒Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.婚禮禮盒Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "婚禮禮盒2", withExtension: "jpg")`
    static func 婚禮禮盒2Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.婚禮禮盒2Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `home_1`.
    static let home_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_1")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `me_1`.
    static let me_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "me_1")
    /// Image `me`.
    static let me = Rswift.ImageResource(bundle: R.hostingBundle, name: "me")
    /// Image `婚禮禮盒.jpg`.
    static let 婚禮禮盒Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "婚禮禮盒.jpg")
    /// Image `婚禮禮盒2.jpg`.
    static let 婚禮禮盒2Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "婚禮禮盒2.jpg")
    
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home_1", bundle: ..., traitCollection: ...)`
    static func home_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me", bundle: ..., traitCollection: ...)`
    static func me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me_1", bundle: ..., traitCollection: ...)`
    static func me_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "婚禮禮盒.jpg", bundle: ..., traitCollection: ...)`
    static func 婚禮禮盒Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.婚禮禮盒Jpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "婚禮禮盒2.jpg", bundle: ..., traitCollection: ...)`
    static func 婚禮禮盒2Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.婚禮禮盒2Jpg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Cell`.
    static let cell: Rswift.ReuseIdentifier<DetailCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "Cell")
    /// Reuse identifier `MainCell`.
    static let mainCell: Rswift.ReuseIdentifier<MainTableViewCell> = Rswift.ReuseIdentifier(identifier: "MainCell")
    /// Reuse identifier `detailCell`.
    static let detailCell: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "detailCell")
    /// Reuse identifier `testcell`.
    static let testcell: Rswift.ReuseIdentifier<MainCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "testcell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `AccountViewController`.
    static let accountViewController = _R.storyboard.accountViewController()
    /// Storyboard `DetailSelectedViewController`.
    static let detailSelectedViewController = _R.storyboard.detailSelectedViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainViewController`.
    static let mainViewController = _R.storyboard.mainViewController()
    
    /// `UIStoryboard(name: "AccountViewController", bundle: ...)`
    static func accountViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountViewController)
    }
    
    /// `UIStoryboard(name: "DetailSelectedViewController", bundle: ...)`
    static func detailSelectedViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailSelectedViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainViewController", bundle: ...)`
    static func mainViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try detailSelectedViewController.validate()
    }
    
    struct accountViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = AccountViewController
      
      let bundle = R.hostingBundle
      let name = "AccountViewController"
      
      fileprivate init() {}
    }
    
    struct detailSelectedViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DetailSelectedViewController
      
      let bundle = R.hostingBundle
      let compositionViewController = StoryboardViewControllerResource<DetailSelectedViewController>(identifier: "CompositionViewController")
      let name = "DetailSelectedViewController"
      
      func compositionViewController(_: Void = ()) -> DetailSelectedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: compositionViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.detailSelectedViewController().compositionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'compositionViewController' could not be loaded from storyboard 'DetailSelectedViewController' as 'DetailSelectedViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mainViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainViewController
      
      let bundle = R.hostingBundle
      let name = "MainViewController"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
